{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport nextConnect from 'next-connect';\nimport AuthenticationMiddleware from \"../../../Source/Middlewares/AuthenticationMiddleware\";\nimport PostService from '../../../source/services/PostService';\nexport default _c2 = nextConnect().use(function (req, res, next) {\n  console.log(\"custom middleware\");\n  next();\n}).use(AuthenticationMiddleware).get( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res) {\n    var posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return PostService.GetAll();\n\n          case 2:\n            posts = _context.sent;\n            res.statusCode = 200;\n            res.json(posts);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}()).post( /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res) {\n    var post;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            res.statusCode = 200;\n            _context2.next = 3;\n            return PostService.Add(req.body);\n\n          case 3:\n            post = _context2.sent;\n            res.json(post);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}())[\"delete\"](_c = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(req, res) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            console.log(req.body.id);\n\n            if (!(req.body.id == undefined)) {\n              _context3.next = 5;\n              break;\n            }\n\n            res.statusCode = 400;\n            _context3.next = 8;\n            break;\n\n          case 5:\n            res.statusCode = 200;\n            _context3.next = 8;\n            return PostService.Delete(req.body.id);\n\n          case 8:\n            res.end();\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function _c(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$nextConnect<NextApiRequest, NextApiResponse>()\\r\\n\\r\\n    .use<NextApiRequest, NextApiResponse>((req, res, next) => {\\r\\n        console.log(\\\"custom middleware\\\")\\r\\n        next();\\r\\n    })\\r\\n\\r\\n    .use<NextApiRequest, NextApiResponse>(AuthenticationMiddleware)\\r\\n\\r\\n    .get(async (req, res) => {\\r\\n        var posts = await PostService.GetAll();\\r\\n        res.statusCode = 200\\r\\n        res.json(posts)\\r\\n\\r\\n    })\\r\\n\\r\\n    .post(async (req, res) => {\\r\\n        res.statusCode = 200\\r\\n        var post = await PostService.Add(req.body);\\r\\n        res.json(post)\\r\\n\\r\\n    })\\r\\n    \\r\\n    .delete\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/pages/api/post/index.ts"],"names":["nextConnect","AuthenticationMiddleware","PostService","use","req","res","next","console","log","get","GetAll","posts","statusCode","json","post","Add","body","id","undefined","Delete","end"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,cAAxB;AAEA,OAAOC,wBAAP,MAAqC,sDAArC;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AAEA,qBAAeF,WAAW,GAErBG,GAFU,CAE2B,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACtDC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAF,EAAAA,IAAI;AACP,CALU,EAOVH,GAPU,CAO2BF,wBAP3B,EASVQ,GATU;AAAA,sEASN,iBAAOL,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACiBH,WAAW,CAACQ,MAAZ,EADjB;;AAAA;AACGC,YAAAA,KADH;AAEDN,YAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AACAP,YAAAA,GAAG,CAACQ,IAAJ,CAASF,KAAT;;AAHC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GATM;;AAAA;AAAA;AAAA;AAAA,KAgBVG,IAhBU;AAAA,uEAgBL,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACFA,YAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AADE;AAAA,mBAEeV,WAAW,CAACa,GAAZ,CAAgBX,GAAG,CAACY,IAApB,CAFf;;AAAA;AAEEF,YAAAA,IAFF;AAGFT,YAAAA,GAAG,CAACQ,IAAJ,CAASC,IAAT;;AAHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAhBK;;AAAA;AAAA;AAAA;AAAA;AAAA,uEAuBH,kBAAOV,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACJE,YAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACY,IAAJ,CAASC,EAArB;;AADI,kBAEAb,GAAG,CAACY,IAAJ,CAASC,EAAT,IAAeC,SAFf;AAAA;AAAA;AAAA;;AAGAb,YAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AAHA;AAAA;;AAAA;AAMAP,YAAAA,GAAG,CAACO,UAAJ,GAAiB,GAAjB;AANA;AAAA,mBAOMV,WAAW,CAACiB,MAAZ,CAAmBf,GAAG,CAACY,IAAJ,CAASC,EAA5B,CAPN;;AAAA;AASJZ,YAAAA,GAAG,CAACe,GAAJ;;AATI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAvBG;;AAAA;AAAA;AAAA;AAAA,IAAf","sourcesContent":["import nextConnect from 'next-connect';\r\nimport next, { NextApiRequest, NextApiResponse } from 'next'\r\nimport AuthenticationMiddleware from \"../../../Source/Middlewares/AuthenticationMiddleware\"\r\nimport PostService from '../../../source/services/PostService'\r\n\r\nexport default nextConnect<NextApiRequest, NextApiResponse>()\r\n\r\n    .use<NextApiRequest, NextApiResponse>((req, res, next) => {\r\n        console.log(\"custom middleware\")\r\n        next();\r\n    })\r\n\r\n    .use<NextApiRequest, NextApiResponse>(AuthenticationMiddleware)\r\n\r\n    .get(async (req, res) => {\r\n        var posts = await PostService.GetAll();\r\n        res.statusCode = 200\r\n        res.json(posts)\r\n\r\n    })\r\n\r\n    .post(async (req, res) => {\r\n        res.statusCode = 200\r\n        var post = await PostService.Add(req.body);\r\n        res.json(post)\r\n\r\n    })\r\n    \r\n    .delete(async (req, res) => {\r\n        console.log(req.body.id)\r\n        if (req.body.id == undefined) {\r\n            res.statusCode = 400         \r\n        }\r\n        else {\r\n            res.statusCode = 200\r\n            await PostService.Delete(req.body.id);\r\n        }\r\n        res.end();\r\n    });\r\n\r\n"]},"metadata":{},"sourceType":"module"}