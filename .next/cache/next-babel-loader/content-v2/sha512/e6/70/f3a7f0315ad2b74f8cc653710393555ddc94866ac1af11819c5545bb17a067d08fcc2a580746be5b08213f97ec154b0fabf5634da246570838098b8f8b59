{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar json = require('../../db.json');\n\nvar MongoClient = require('mongodb').MongoClient;\n\nvar url = \"mongodb://localhost:27017/mydb\";\nvar POSTS = json.posts;\n\nvar PostService = /*#__PURE__*/function () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Çalıştı\");\n                MongoClient.connect(url, function (err, db) {\n                  if (err) throw err;\n                  var dbo = db.db(\"blog\");\n                  var myobj = {\n                    title: \"Company Inc\",\n                    description: \"Highway 37\",\n                    date: \"asd\",\n                    id: 51\n                  };\n                  dbo.collection(\"customers\").insertOne(myobj, function (err, res) {\n                    if (err) throw err;\n                    console.log(\"1 document inserted\");\n                    db.close();\n                  });\n                });\n                return _context.abrupt(\"return\", POSTS);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll() {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                post.date = new Date().toString();\n                post.id = Math.floor(Math.random() * 100000);\n                POSTS.push(post);\n                console.log(POSTS);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function Add(_x) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                POSTS.forEach(function (item, index) {\n                  if (id != item.id) {\n                    delete POSTS[index];\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Delete(_x2) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return PostService;\n}();\n\nexport default new PostService();","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/Source/Services/PostService.js"],"names":["json","require","MongoClient","url","POSTS","posts","PostService","console","log","connect","err","db","dbo","myobj","title","description","date","id","collection","insertOne","res","close","post","Date","toString","Math","floor","random","push","forEach","item","index"],"mappings":";;;;;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,WAArC;;AACA,IAAIC,GAAG,GAAG,gCAAV;AAEA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAjB;;IACMC,W;;;;;;;;;;;;;AAEEC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAN,gBAAAA,WAAW,CAACO,OAAZ,CAAoBN,GAApB,EAAyB,UAAUO,GAAV,EAAeC,EAAf,EAAmB;AACxC,sBAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,sBAAIE,GAAG,GAAGD,EAAE,CAACA,EAAH,CAAM,MAAN,CAAV;AACA,sBAAIE,KAAK,GAAG;AAAEC,oBAAAA,KAAK,EAAE,aAAT;AAAwBC,oBAAAA,WAAW,EAAE,YAArC;AAAmDC,oBAAAA,IAAI,EAAC,KAAxD;AAA8DC,oBAAAA,EAAE,EAAC;AAAjE,mBAAZ;AACAL,kBAAAA,GAAG,CAACM,UAAJ,CAAe,WAAf,EAA4BC,SAA5B,CAAsCN,KAAtC,EAA6C,UAAUH,GAAV,EAAeU,GAAf,EAAoB;AAC7D,wBAAIV,GAAJ,EAAS,MAAMA,GAAN;AACTH,oBAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAG,oBAAAA,EAAE,CAACU,KAAH;AACH,mBAJD;AAKH,iBATD;iDAWOjB,K;;;;;;;;;;;;;;;;;;;4FAGDkB,I;;;;;AACNA,gBAAAA,IAAI,CAACN,IAAL,GAAY,IAAIO,IAAJ,GAAWC,QAAX,EAAZ;AACAF,gBAAAA,IAAI,CAACL,EAAL,GAAUQ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAV;AACAvB,gBAAAA,KAAK,CAACwB,IAAN,CAAWN,IAAX;AACAf,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;;;;;;;;;;;;;;;;;;+FAGSa,E;;;;;AACTb,gBAAAA,KAAK,CAACyB,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,sBAAId,EAAE,IAAIa,IAAI,CAACb,EAAf,EAAmB;AACf,2BAAOb,KAAK,CAAC2B,KAAD,CAAZ;AACH;AACJ,iBAJD;;;;;;;;;;;;;;;;;;;;;AAUR,eAAe,IAAIzB,WAAJ,EAAf","sourcesContent":["var json = require('../../db.json');\r\nvar MongoClient = require('mongodb').MongoClient;\r\nvar url = \"mongodb://localhost:27017/mydb\";\r\n\r\nvar POSTS = json.posts\r\nclass PostService {\r\n    async GetAll() {\r\n        console.log(\"Çalıştı\")\r\n        MongoClient.connect(url, function (err, db) {\r\n            if (err) throw err;\r\n            var dbo = db.db(\"blog\");\r\n            var myobj = { title: \"Company Inc\", description: \"Highway 37\" ,date:\"asd\",id:51};\r\n            dbo.collection(\"customers\").insertOne(myobj, function (err, res) {\r\n                if (err) throw err;\r\n                console.log(\"1 document inserted\");\r\n                db.close();\r\n            });\r\n        });\r\n\r\n        return POSTS;\r\n    }\r\n\r\n    async Add(post) {\r\n        post.date = new Date().toString();\r\n        post.id = Math.floor(Math.random() * 100000);\r\n        POSTS.push(post);\r\n        console.log(POSTS)\r\n    }\r\n\r\n    async Delete(id) {\r\n        POSTS.forEach((item, index) => {\r\n            if (id != item.id) {\r\n                delete POSTS[index]\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}