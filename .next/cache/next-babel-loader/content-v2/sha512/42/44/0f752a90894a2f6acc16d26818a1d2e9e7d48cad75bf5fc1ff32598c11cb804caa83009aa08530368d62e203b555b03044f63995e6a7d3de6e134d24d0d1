{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar json = require('../../db.json');\n\nimport axios from \"axios\";\nimport { URL } from \"./_config\";\n\nvar PostService = /*#__PURE__*/function () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get(URL + \"posts\");\n\n              case 2:\n                response = _context.sent;\n\n                if (!(response.status == 200)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", response.data);\n\n              case 7:\n                json.posts;\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll() {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                post.date = new Date().toString();\n                post.id = Math.floor(Math.random() * 100000);\n                _context2.next = 4;\n                return axios.post(URL + \"posts\", post);\n\n              case 4:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.data);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function Add(_x) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios[\"delete\"](URL + \"posts/\" + id.toString());\n\n              case 2:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response.data);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Delete(_x2) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return PostService;\n}();\n\nexport default new PostService();","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/Source/Services/PostService.js"],"names":["json","require","axios","URL","PostService","get","response","status","data","posts","post","date","Date","toString","id","Math","floor","random"],"mappings":";;;;;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,WAApB;;IAEMC,W;;;;;;;;;;;;;;;uBAEuBF,KAAK,CAACG,GAAN,CAAUF,GAAG,GAAG,OAAhB,C;;;AAAjBG,gBAAAA,Q;;sBACAA,QAAQ,CAACC,MAAT,IAAmB,G;;;;;iDACZD,QAAQ,CAACE,I;;;AAGhBR,gBAAAA,IAAI,CAACS,KAAL;;;;;;;;;;;;;;;;;;;4FAGEC,I;;;;;;AACNA,gBAAAA,IAAI,CAACC,IAAL,GAAY,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;AACAH,gBAAAA,IAAI,CAACI,EAAL,GAAUC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAV;;uBAEqBf,KAAK,CAACQ,IAAN,CAAWP,GAAG,GAAG,OAAjB,EAAyBO,IAAzB,C;;;AAAjBJ,gBAAAA,Q;kDACGA,QAAQ,CAACE,I;;;;;;;;;;;;;;;;;;;+FAEPM,E;;;;;;;uBACYZ,KAAK,UAAL,CAAaC,GAAG,GAAG,QAAN,GAAiBW,EAAE,CAACD,QAAH,EAA9B,C;;;AAAjBP,gBAAAA,Q;kDACGA,QAAQ,CAACE,I;;;;;;;;;;;;;;;;;;;;;AAIxB,eAAe,IAAIJ,WAAJ,EAAf","sourcesContent":["var json = require('../../db.json');\r\nimport axios from \"axios\";\r\nimport { URL } from \"./_config\";\r\n\r\nclass PostService {\r\n    async GetAll() {\r\n        var response = await axios.get(URL + \"posts\");\r\n        if (response.status == 200) {\r\n            return response.data;\r\n        }\r\n        else {\r\n            json.posts\r\n        }\r\n    }\r\n    async Add(post) {\r\n        post.date = new Date().toString();\r\n        post.id = Math.floor(Math.random() * 100000);\r\n\r\n        var response = await axios.post(URL + \"posts\",post);\r\n        return response.data\r\n    }\r\n    async Delete(id) {\r\n        var response = await axios.delete(URL + \"posts/\" + id.toString());\r\n        return response.data\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}