{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar json = require('../../db.json');\n\nimport moongose from 'mongoose';\nvar connection = {};\nvar POSTS = json.posts;\n\nvar PostService = /*#__PURE__*/function () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var db;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Çalıştı\");\n\n                if (!connection.isConnected) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 3:\n                _context.next = 5;\n                return mongoose.connect(process.env.MONGO_URI, {\n                  useNewUrlParser: true,\n                  useUnifiedTopology: true\n                });\n\n              case 5:\n                db = _context.sent;\n                connection.isConnected = db.connections[0].readyState;\n                console.log(\"bağalı : \" + connection.isConnected);\n                return _context.abrupt(\"return\", POSTS);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll() {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                post.date = new Date().toString();\n                post.id = Math.floor(Math.random() * 100000);\n                POSTS.push(post);\n                console.log(POSTS);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function Add(_x) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                POSTS.forEach(function (item, index) {\n                  if (id != item.id) {\n                    delete POSTS[index];\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Delete(_x2) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return PostService;\n}();\n\nexport default new PostService();","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/Source/Services/PostService.js"],"names":["json","require","moongose","connection","POSTS","posts","PostService","console","log","isConnected","mongoose","connect","process","env","MONGO_URI","useNewUrlParser","useUnifiedTopology","db","connections","readyState","post","date","Date","toString","id","Math","floor","random","push","forEach","item","index"],"mappings":";;;;;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,IAAMC,UAAU,GAAG,EAAnB;AAEA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAjB;;IACMC,W;;;;;;;;;;;;;;AAEEC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;qBACIL,UAAU,CAACM,W;;;;;;;;;uBAIEC,QAAQ,CAACC,OAAT,CAAiBC,OAAO,CAACC,GAAR,CAAYC,SAA7B,EAAwC;AACrDC,kBAAAA,eAAe,EAAE,IADoC;AAErDC,kBAAAA,kBAAkB,EAAE;AAFiC,iBAAxC,C;;;AAAXC,gBAAAA,E;AAKNd,gBAAAA,UAAU,CAACM,WAAX,GAAyBQ,EAAE,CAACC,WAAH,CAAe,CAAf,EAAkBC,UAA3C;AACAZ,gBAAAA,OAAO,CAACC,GAAR,CAAY,cAAcL,UAAU,CAACM,WAArC;iDACOL,K;;;;;;;;;;;;;;;;;;;4FAGDgB,I;;;;;AACNA,gBAAAA,IAAI,CAACC,IAAL,GAAY,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;AACAH,gBAAAA,IAAI,CAACI,EAAL,GAAUC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAV;AACAvB,gBAAAA,KAAK,CAACwB,IAAN,CAAWR,IAAX;AACAb,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;;;;;;;;;;;;;;;;;;+FAGSoB,E;;;;;AACTpB,gBAAAA,KAAK,CAACyB,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,sBAAIP,EAAE,IAAIM,IAAI,CAACN,EAAf,EAAmB;AACf,2BAAOpB,KAAK,CAAC2B,KAAD,CAAZ;AACH;AACJ,iBAJD;;;;;;;;;;;;;;;;;;;;;AAUR,eAAe,IAAIzB,WAAJ,EAAf","sourcesContent":["var json = require('../../db.json');\r\nimport moongose from 'mongoose'\r\nconst connection = {};\r\n\r\nvar POSTS = json.posts\r\nclass PostService {\r\n    async GetAll() {\r\n        console.log(\"Çalıştı\")\r\n        if (connection.isConnected) {\r\n            return;\r\n        }\r\n    \r\n        const db = await mongoose.connect(process.env.MONGO_URI, {\r\n            useNewUrlParser: true,\r\n            useUnifiedTopology: true,\r\n        });\r\n    \r\n        connection.isConnected = db.connections[0].readyState;\r\n        console.log(\"bağalı : \" + connection.isConnected)\r\n        return POSTS;\r\n    }\r\n\r\n    async Add(post) {\r\n        post.date = new Date().toString();\r\n        post.id = Math.floor(Math.random() * 100000);\r\n        POSTS.push(post);\r\n        console.log(POSTS)\r\n    }\r\n\r\n    async Delete(id) {\r\n        POSTS.forEach((item, index) => {\r\n            if (id != item.id) {\r\n                delete POSTS[index]\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}