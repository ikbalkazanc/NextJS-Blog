{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar json = require('../../db.json');\n\nimport dbConnect from './dbConnect';\n\nvar mongoose = require(\"mongoose\");\n\nvar fs = require(\"fs\");\n\nvar url = \"mongodb://localhost:27017/blog\";\nvar POSTS = json.posts;\n\nvar PostService = /*#__PURE__*/function () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                mongoose.connect(url);\n                return _context.abrupt(\"return\", POSTS);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll() {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                post.date = new Date().toString();\n                post.id = Math.floor(Math.random() * 100000);\n                POSTS.push(post);\n                console.log(POSTS);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function Add(_x) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                POSTS.forEach(function (item, index) {\n                  if (id != item.id) {\n                    delete POSTS[index];\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Delete(_x2) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return PostService;\n}();\n\nexport default new PostService();","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/Source/Services/PostService.js"],"names":["json","require","dbConnect","mongoose","fs","url","POSTS","posts","PostService","connect","post","date","Date","toString","id","Math","floor","random","push","console","log","forEach","item","index"],"mappings":";;;;;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AACA,IAAMC,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,IAAD,CAAlB;;AAEA,IAAII,GAAG,GAAG,gCAAV;AAEA,IAAIC,KAAK,GAAGN,IAAI,CAACO,KAAjB;;IACMC,W;;;;;;;;;;;;;AAEEL,gBAAAA,QAAQ,CAACM,OAAT,CAAiBJ,GAAjB;iDAEOC,K;;;;;;;;;;;;;;;;;;;4FAGDI,I;;;;;AACNA,gBAAAA,IAAI,CAACC,IAAL,GAAY,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;AACAH,gBAAAA,IAAI,CAACI,EAAL,GAAUC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAV;AACAX,gBAAAA,KAAK,CAACY,IAAN,CAAWR,IAAX;AACAS,gBAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;;;;;;;;;;;;;;;;;;;+FAGSQ,E;;;;;AACTR,gBAAAA,KAAK,CAACe,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,sBAAIT,EAAE,IAAIQ,IAAI,CAACR,EAAf,EAAmB;AACf,2BAAOR,KAAK,CAACiB,KAAD,CAAZ;AACH;AACJ,iBAJD;;;;;;;;;;;;;;;;;;;;;AAUR,eAAe,IAAIf,WAAJ,EAAf","sourcesContent":["var json = require('../../db.json');\r\nimport dbConnect from './dbConnect'\r\nconst mongoose = require(\"mongoose\");\r\nconst fs = require(\"fs\");\r\n\r\nvar url = \"mongodb://localhost:27017/blog\";\r\n\r\nvar POSTS = json.posts\r\nclass PostService {\r\n    async GetAll() {\r\n        mongoose.connect(url);\r\n\r\n        return POSTS;\r\n    }\r\n\r\n    async Add(post) {\r\n        post.date = new Date().toString();\r\n        post.id = Math.floor(Math.random() * 100000);\r\n        POSTS.push(post);\r\n        console.log(POSTS)\r\n    }\r\n\r\n    async Delete(id) {\r\n        POSTS.forEach((item, index) => {\r\n            if (id != item.id) {\r\n                delete POSTS[index]\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}