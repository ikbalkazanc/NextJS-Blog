{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar json = require('../../db.json');\n\nvar _require = require(\"mongodb\"),\n    MongoClient = _require.MongoClient;\n\nvar url = \"mongodb://localhost:27017/blog\";\nvar POSTS = json.posts;\n\nvar PostService = /*#__PURE__*/function () {\n  function PostService() {\n    _classCallCheck(this, PostService);\n  }\n\n  _createClass(PostService, [{\n    key: \"GetAll\",\n    value: function () {\n      var _GetAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"Çalıştı\");\n                client = new MongoClient(url);\n                _context.next = 4;\n                return client.connect();\n\n              case 4:\n                _context.next = 6;\n                return client.db(\"blog\").command({\n                  ping: 1\n                });\n\n              case 6:\n                console.log(\"Connected successfully to server\");\n                return _context.abrupt(\"return\", POSTS);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function GetAll() {\n        return _GetAll.apply(this, arguments);\n      }\n\n      return GetAll;\n    }()\n  }, {\n    key: \"Add\",\n    value: function () {\n      var _Add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(post) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                post.date = new Date().toString();\n                post.id = Math.floor(Math.random() * 100000);\n                POSTS.push(post);\n                console.log(POSTS);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function Add(_x) {\n        return _Add.apply(this, arguments);\n      }\n\n      return Add;\n    }()\n  }, {\n    key: \"Delete\",\n    value: function () {\n      var _Delete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                POSTS.forEach(function (item, index) {\n                  if (id != item.id) {\n                    delete POSTS[index];\n                  }\n                });\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function Delete(_x2) {\n        return _Delete.apply(this, arguments);\n      }\n\n      return Delete;\n    }()\n  }]);\n\n  return PostService;\n}();\n\nexport default new PostService();","map":{"version":3,"sources":["C:/Users/iko_k/Desktop/Projeler/nextjs/nextjs-blog/Source/Services/PostService.js"],"names":["json","require","MongoClient","url","POSTS","posts","PostService","console","log","client","connect","db","command","ping","post","date","Date","toString","id","Math","floor","random","push","forEach","item","index"],"mappings":";;;;;AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAlB;;eACwBA,OAAO,CAAC,SAAD,C;IAAvBC,W,YAAAA,W;;AACR,IAAIC,GAAG,GAAG,gCAAV;AAEA,IAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAjB;;IACMC,W;;;;;;;;;;;;;;AAEEC,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACMC,gBAAAA,M,GAAS,IAAIP,WAAJ,CAAgBC,GAAhB,C;;uBACTM,MAAM,CAACC,OAAP,E;;;;uBAEAD,MAAM,CAACE,EAAP,CAAU,MAAV,EAAkBC,OAAlB,CAA0B;AAAEC,kBAAAA,IAAI,EAAE;AAAR,iBAA1B,C;;;AACNN,gBAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;iDACOJ,K;;;;;;;;;;;;;;;;;;;4FAGDU,I;;;;;AACNA,gBAAAA,IAAI,CAACC,IAAL,GAAY,IAAIC,IAAJ,GAAWC,QAAX,EAAZ;AACAH,gBAAAA,IAAI,CAACI,EAAL,GAAUC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAAV;AACAjB,gBAAAA,KAAK,CAACkB,IAAN,CAAWR,IAAX;AACAP,gBAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;;;;;;;;;;;;;;;;;;+FAGSc,E;;;;;AACTd,gBAAAA,KAAK,CAACmB,OAAN,CAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC3B,sBAAIP,EAAE,IAAIM,IAAI,CAACN,EAAf,EAAmB;AACf,2BAAOd,KAAK,CAACqB,KAAD,CAAZ;AACH;AACJ,iBAJD;;;;;;;;;;;;;;;;;;;;;AAUR,eAAe,IAAInB,WAAJ,EAAf","sourcesContent":["var json = require('../../db.json');\r\nconst { MongoClient } = require(\"mongodb\");\r\nvar url = \"mongodb://localhost:27017/blog\";\r\n\r\nvar POSTS = json.posts\r\nclass PostService {\r\n    async GetAll() {\r\n        console.log(\"Çalıştı\")\r\n        const client = new MongoClient(url);\r\n        await client.connect();\r\n        // Establish and verify connection\r\n        await client.db(\"blog\").command({ ping: 1 });\r\n        console.log(\"Connected successfully to server\");\r\n        return POSTS;\r\n    }\r\n\r\n    async Add(post) {\r\n        post.date = new Date().toString();\r\n        post.id = Math.floor(Math.random() * 100000);\r\n        POSTS.push(post);\r\n        console.log(POSTS)\r\n    }\r\n\r\n    async Delete(id) {\r\n        POSTS.forEach((item, index) => {\r\n            if (id != item.id) {\r\n                delete POSTS[index]\r\n            }\r\n        })\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default new PostService();"]},"metadata":{},"sourceType":"module"}